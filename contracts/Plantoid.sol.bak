pragma solidity ^0.4.19;


contract Plantoid {

    event GotDonation(address _donor, uint amount);
    event AcceptedDonation(address _donor, uint amount);
    event Reproducing(uint seedCnt);

    address public artist;
    uint public weiRaised;
    uint public threshold;
    uint public seedCnt = 0;

    //enum Phase { Capitalisation, Mating, Hiring, Finish }
    struct Seed {
        uint id;
        uint status;
        mapping (address => uint) reputation;
    }

    mapping (uint => Seed) public seeds;

    function Plantoid(address _artist, uint _threshold) public {
        artist = _artist;
        threshold = _threshold;
    }

    // Simple callback function
    function () public payable {
        fund();
    }

    function getBalance() public constant returns(uint256) {
        return address(this).balance;
    }

    function getSeed(uint id) public constant returns(uint _id, uint _status, uint _weis, uint _thres) {
        _status = seeds[id].status;
        _thres = threshold;
        _id = id;
        if (_status == 1) { _weis = threshold; } else { _weis = weiRaised; }
    }

    // External fund function
    function fund() public payable {
        require(msg.value > 0);

        var funds = msg.value;

        // Log that the Plantoid received a new donation
        emit GotDonation(msg.sender, msg.value);

        while (funds > 0) {
            funds = _fund(funds);
        }


    }

    // Internal fund function
    function _fund(uint _donation) internal returns(uint overflow) {

        uint donation;

      // Check if there is an overflow
        if (weiRaised + _donation > threshold) {
            overflow = weiRaised + _donation - threshold;
            donation = threshold - weiRaised;
        } else {
            donation = _donation;
        }
      // Increase the amount of weiRaised (for that particular Seed)
        weiRaised += donation;
        emit AcceptedDonation(msg.sender, donation);

      // Increase the reputation of the donor (for that particular Seed)
        seeds[seedCnt].reputation[msg.sender] += donation;

        if (weiRaised >= threshold) {
            emit Reproducing(seedCnt);
            // change status of the seeds
            seeds[seedCnt].status = 1;

            // Create new Seed:
            seedCnt++;
            seeds[seedCnt].id = seedCnt;
            weiRaised = 0;
            // Feed the new seed if there was an overflow of donations
            // (overflow != 0) {  _fund(overflow); }
        }
    }


}
