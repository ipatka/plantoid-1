<!doctype html>
<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>Plantoids: Blockchain-based life forms</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <link rel="stylesheet" href="http://www.w3schools.com/lib/w3.css">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css">
        <link rel="stylesheet" href="./assets/css/basic-w3.css" />

    </head>

<script src="./web3.js"></script>


<body class="w3-black">


    <!-- Page Content -->
    <div class="w3-padding-large"  id="main">

      <!-- Header -->
      <header class="w3-container w3-padding-32 w3-center " id="home">
        <h1 class="warning w3-xlarge"> This project is still on its alpha phase. We don't guarantee complete security. Play at your own risk !</h3>

          <p>Hello ...</p>
          <h1 class="quote w3-xxxlarge">I'm a Plantoid</h1>
          <p>A Blockchain-based life form.</p>


          <div class="w3-row w3-center wp-padding-16 w3-section">


              <div class="w3-third w3-section w3-left w3-left-align">
                  <p class="quote w3-xxxlarge">Feed Me! </p>

                  <div class="w3-row w3-left w3-left-align w3-section">

                  <div class="w3-col w3-container w3-padding-0" style="width: 50px">
                    <img src="./images/QR6-BTC.png" id="QRcode"  width="45" style="border: 1px solid white; padding: 2px;"><br/>
                    <img src="./images/QR6-ETH.png" id="QRcode"  width="45" style="border: 1px solid white; padding: 2px;">
                    <hr style="border:black; padding-bottom: 3px;"/>
                    <img src="./images/metamask.png" width="45" style="padding: 2px;">
                  </div>

                  <div class="w3-rest w3-container w3-padding-small">
                    <span class="w3-small">BITCOIN:</span><br/>
                    <span class="w3-tiny">16utCvJynaAfk8wPb6LnnnXtLP3t3o8ZGQ</span>  <br/>
                    <span class="w3-small">ETHER:</span><br/>
                    <span class="w3-tiny">0xace3F6d73b5a51CDe204F47008a4f009283032f3</span>
                    <hr/>
                    Send money via Metamask <br/>
                    <span class="w3-small">Amount (in Wei):</span> <input type="text" id="amount">
                    <input type="image" src="./images/send.png" id="feed" onclick="sendFunds()">
                  </div>

                  </div>

              </div>

              <div class="w3-third w3-section">
                   <img src="./images/header-small.png" alt="plantoid"  height="250px" >
              </div>

              <div class="w3-third w3-section w3-left w3-left-align">

                <div class="w3-col w3-container w3-quarter w3-padding-0">
                    <span class="w3-small">Address: </span><br/>
                    <span class="w3-small">Creator: </span><br/>
                    <span class="w3-small">Parent: </span><br/>
                </div>

                <div class="w3-col w3-container w3-threequarter w3-padding-0">
                    <span class="w3-tiny">ETHHH</span><br/>
                    <span class="w3-tiny" id="PlantoidCreator"></span><br/>
                    <span class="w3-tiny" id="PlantoidParent"></span><br/>
                </div>

                <div class="w3-row w3-section w3-left w3-left-align">

                  <div class="w3-col w3-container w3-quarter w3-padding-0">
                    <p><span class="w3-small">Current balance:</span></p>
                    <p><span class="w3-small">Required threshold:</span></p>
                  </div>
                  <div class="w3-col w3-container w3-half w3-center w3-center-align">
                      <span class="w3-xxlarge" id="balance"> ??? </span>
                      <hr style="width: 60px; margin-left: 20px; margin-top: 10px; margin-bottom:10px;">
                      <span class="w3-xxlarge" id="PlantoidThreshold">???</span>
                  </div>
                  <div class="w3-col w3-container w3-quarter w3-padding-0 ">
                      <br/><br/>WEI
                  </div>
                </div>

                <div class="w3-row w3-section w3-left w3-left-align">
                  Current Seed count = <span id="Seedcnt"></span><br>
                </div>
          </div>

      </header>


<hr/>
<table id="SeedTable"></table>
<hr/>
<div id="transactionLog"></div>

</div>
</body>







<script>

console.log("web333: " + web3);

if(typeof web3 !== 'undefined') {
	web3 = new Web3(web3.currentProvider);
} else {
	web3 = new Web3(new Web3.providers.HttpProvider("https://kovan.infura.io/1FRENmMxR6mZ55Sjp8cZ"));
}


var plantoid = web3.eth.contract(ABI).at("ETHHH");
var genesis = web3.eth.contract(IBA).at("GPPP");
var proxy = web3.eth.contract(PRO).at("ETHHH");


var threshold;

var SeedCounter = 0;
var SeedStatus = [];
var SeedWinner = [];

setTimeout(getBalance(), 20000);
setTimeout(getInfo(), 20000);


function getBalance() {
	web3.eth.getBalance(plantoid.address, (e,r)=>{document.getElementById('balance').innerHTML =  r;});
}


function getInfo() {

  proxy._implementation.call(function(err, res) {
    document.getElementById('PlantoidCreator').innerHTML = res;
  });

  plantoid.parent.call(function(err, res) {
    document.getElementById('PlantoidParent').innerHTML = res;
  });
  plantoid.threshold.call(function(err, res) {
    document.getElementById('PlantoidThreshold').innerHTML =  web3.fromWei(res, 'wei') ;
    threshold = res;
  });

  ListSeeds();
}



var rows = 0;

function ListSeeds() {

  plantoid.seedCnt.call(function(err, res) {
    console.log("updating seeds, with new counter: " + res);

    SeedCounter = res;
    document.getElementById('Seedcnt').innerHTML = SeedCounter;

    for(var i = 0; i <= SeedCounter; i++) {
        CreateSeeds(i); console.log("creating seed.... " + i);
    }
  });
}


  function CreateSeeds(i) {

      var table = document.getElementById("SeedTable");

      plantoid.getSeed.call(i, function(err, values) {
        console.log("seed # "+ i + ": " + values);

        SeedStatus[i] = values[0];

        if(SeedStatus[i] == 3) {  SeedWinner[i] = values[4];  }

        CreateStandardSeed(i, values);

      });

}

  function CreateStandardSeed(i, values) {

      var table = document.getElementById("SeedTable");

        var row = table.insertRow(rows++);
        row.id = "Seed" + i;
        var cell1 = row.insertCell(0);
        var cell2 = row.insertCell(1);
        var cell3 = row.insertCell(2);
        var cell4 = row.insertCell(3);
        cell1.innerHTML = "Seed # " + i;
        cell2.innerHTML = "Status: " + values[0];
        cell3.innerHTML = "(Raised " + values[1] + "Wei's)";
        if(SeedStatus[i] == 1) {
              cell4.innerHTML =
              '<input type="text" id="propURL'+i+'"">' +
              '<button type="button" id="feed" onclick="sendProposal(' + i +')"' +
              '>Send Proposal</button>';
        }

        var row2 = table.insertRow(rows++);
        row2.insertCell(0);
        row2.insertCell(1);
        row2.insertCell(2);
        var cell = row2.insertCell(3);
        cell.id = "Seedrow" + i;

        UpdateProposals4Seed(i);

  }




    function UpdateSeeds(i) {
      var table = document.getElementById("SeedTable");
      console.log("looking for..,,.,.,.,.,.,.,.: "+"Seed"+i);
      var row = document.getElementById("Seed"+i);  console.log("raw Seed+"+i+" = " + row);
      var row2 = document.getElementById("Seedrow"+i); console.log("raw Seedrow+"+i+" = " + row2);
      if(row) {
        row.parentNode.removeChild(row);
        row2.parentNode.removeChild(row2);
        rows -= 2;
        CreateSeeds(i);  console.log("CREATING SEED # " + i);
      }
    }



    function UpdateAllProposals() {
      plantoid.seedCnt.call(function(err, res) {
        console.log("updating seeds, with new counter: " + res);
        for(var j=0; j<res; j++) {
          UpdateProposals4Seed(j);
        }
      });
    }

   function UpdateProposals4Seed(i) {

      console.log("updating proposals for Seed # " + i);
      plantoid.NewProposal({}, {fromBlock: 0, toBlock: 'latest'}).get((error, eventResult) => {
        if(error)
          console.log('Error in NewProposal handler: '+ error);
        else {


          var propCounter = eventResult.length;
          var t1 = ""; var t2 = "";

          console.log("here --- propCounter == " + propCounter);


            for(var j = 0; j < propCounter; j++) {

              var args = eventResult[j].args;
              console.log("processing proposition ... " + args.url + " from ID = " + args.id + " of---- " + i);

              if(args.id == i) {

                  var cell = document.getElementById('Seedrow' + args.id);
                  var prop = document.getElementById("Proposal"+args.pid);
                  console.log("document exist? " + prop);

                  if(! document.getElementById("Proposal"+args.pid)) {

                    console.log("checking ;: " + SeedWinner[args.id] + "==" + args.pid );

                    if( (SeedStatus[args.id]==2) && (SeedWinner[args.id] == args.pid)) {
                      t1 = "<b>"; t2 = "</b>";
                    } else { t1 = t2 = ""; }

                      cell.innerHTML += '<span id="PID' + args.pid+ '">' + t1 + "Proposal # " + args.pid + " : <a href='"+args.url+"'>"+args.url+"</a>"+ t2 +" <br></span>"
                      cell.innerHTML += "from: "+args._proposer+" <br>";
                      cell.innerHTML += "Positive votes: <span id='VotesPos"+args.pid+"'> 00 </span>";
                      cell.innerHTML += "Negative votes: <span id='VotesNeg"+args.pid+"'> 00 </span>";

                      cell.innerHTML += '<input type="image" src="./images/upvote.png" height=25 id="vote" onclick="voteProposal(' + args.id +',\''+ args.pid+'\', 1)"' +
                      ((SeedStatus[args.id]==1) || 'disabled') +'/> ';
                      cell.innerHTML += '<input type="image" src="./images/downvote.png" height=20 id="vote" onclick="voteProposal(' + args.id +',\''+ args.pid+'\', 2)"' +
                      ((SeedStatus[args.id]==1) || 'disabled') +'/> <br/>';

                      if(SeedStatus[args.id]==2) {
                        cell.innerHTML += '<button type="button" id="approve" onClick="ApprovePid(\'' + args.pid + '\')">Approve</button>';
                      }

                      var g = document.createElement('div'); g.setAttribute("id", "Proposal"+args.pid);
                      cell.appendChild(g);

                      updateVotesforPidPos(args.pid);
                      updateVotesforPidNeg(args.pid);                  }
                } else { console.log(args.id + " != " + i);}
              }
          }
      });
    }


    function UpdateProposals() {

      var propCounter;

        console.log("updating proposals for ALL Seeds");

        plantoid.NewProposal({}, {fromBlock: 0, toBlock: 'latest'}).get((error, eventResult) => {
          if(error)
            console.log('Error in NewProposal handler: '+ error);
          else {
            console.log('NewProposal: ' + JSON.stringify(eventResult[0]));

            propCounter = eventResult.length;

              for(var j = 0; j < propCounter; j++) {

                var args = eventResult[j].args;

                  var cell = document.getElementById('Seedrow' + args.id);

                  if(! document.getElementById("Proposal"+args.pid)) {

                      console.log('ARG PID 191: ' + args.pid);

                      cell.innerHTML += "Proposal # " + args.pid + " : <a href='"+args.url+"'>"+args.url+"</a> <br>"
                      cell.innerHTML += "from: "+args._proposer+" <br>";
                      cell.innerHTML += "Current Positive votes: <span id='VotesPos"+args.pid+"'> 00 </span>";
                      cell.innerHTML += "Current Negative votes: <span id='VotesPos"+args.pid+"'> 00 </span>";
                      cell.innerHTML += '<button type="button" id="vote" onclick="voteProposal(' + args.id +',\''+ args.pid+'\')">Vote</button>';

                      var g = document.createElement('div'); g.setAttribute("id", "Proposal"+args.pid);
                      cell.appendChild(g);

                      updateVotesforPidPos(args.pid);
                      updateVotesforPidNeg(args.pid);
                  //cell.setAttribute("id", "Proposal"+args.pid);
                }

                }

            }
          });

    }

function updateVotesforPidPos(pid) {
  genesis.voteStatus.call(pid, 1, function(err, val) {
    var p = document.getElementById("VotesPos"+pid);
    p.innerHTML = val / threshold * 100 + "%"; // will need to fix this once reputation starts changing !
  });
}

function updateVotesforPidNeg(pid) {
  genesis.voteStatus.call(pid, 2, function(err, val) {
    var p = document.getElementById("VotesNeg"+pid);
    p.innerHTML = val / threshold * 100 + "%"; // will need to fix this once reputation starts changing !
  });
}





function WinningProposal(pid) {
  var cell = document.getElementById("PID"+pid);
  var content = cell.innerHTML;
  cell.innerHTML = "<b>"+content+"</b>";

}

function LoosingProposal(pid) {
  var cell = document.getElementById("PID"+pid);
  var content = cell.innerHTML;
  cell.innerHTML = "<i>"+content+"</i>";

}

function ApprovePid(pid) {
    plantoid.approveExecution(pid, function(err, values) {
      console.log("approving execution.... " + pid);
    });
}

function sendFunds() {
	var amount = document.getElementById("amount").value;
	//amount = web3.toWei(amount, "ether");
	//web3.eth.sendTransaction({to:'ETH', from: '0x64EB4dfcC14B96582D8D5095e9894b279E519b4B', value:amount}, (e)=>{console.log(e)});
	//plantoid.fund({value: amount});
  web3.eth.sendTransaction({to:'ETHHH',  value:amount, gas:1000000}, (e)=>{console.log(e)});

}

function sendProposal(id) {
  var url = document.getElementById("propURL"+id).value;
  plantoid.addProposal(id, url, function(err, values) {
    console.log("sending new proposal for ID "+ id + " : " + url);
  });
}

function voteProposal(id, pid, vote) {
  plantoid.voteProposal(id, pid, vote, {gas: 7000000}, function(err, values) {
        console.log("voting on proposal ID: "+ pid + "for Seed: "+id + "with decision = " + vote);
   });
  console.log("voting on proposal ID: "+ pid + " for Seed: "+id +"   -> "+ typeof(pid.toString()));

}





plantoid.allEvents({fromBlock:'latest'}, function (error,event){
    if (error) {
      console.log(error)
    } else {
      console.log("All Events")
      console.log(event);
    }
  });


var DonationEvent = plantoid.GotDonation();
DonationEvent.watch(function(err, result) {
  if(err) { console.log(err); return; }
  console.log("GotDonation!!! ");
  console.log(result.args);
  getBalance();
  UpdateSeeds(result.args._seed);
  document.getElementById("transactionLog").innerHTML += "Got Donation of " + web3.fromWei(result.args.amount, 'ether') + " by donor: " + result.args._donor +" <br/>";
});

var DonationAccepted = plantoid.AcceptedDonation();
DonationAccepted.watch(function(err, result) {
  if(err) { console.log(err); return; }
  console.log("ACCEPTED Donation!!! ");
  console.log(result.args);
  getBalance();
  UpdateSeeds(result.args._seed);
  document.getElementById("transactionLog").innerHTML += "Accepted Donation of " + web3.fromWei(result.args.amount, 'ether') + " from donor: " + result.args._donor +" <br/>";
});


var ReproductionEvent = plantoid.Reproducing();
ReproductionEvent.watch(function(err, result) {
  if(err) { console.log(err); return; }
  console.log("Reproduction Event from: "+ result.args.seedCnt);
  document.getElementById("transactionLog").innerHTML += "The plantoid's Seed #"+result.args.seedCnt+" is reproducing itself !!!!  :DDD<br/>";
  UpdateSeeds(result.args.seedCnt);
  CreateSeeds(++SeedCounter);
});



var NewProposalEvent = plantoid.NewProposal();
NewProposalEvent.watch(function(err, result) {
  if(err) { console.log(err); return; }
  console.log("NewProposal Event!");
  console.log(result.args);
  UpdateProposals4Seed(Number(result.args.id));
  document.getElementById("transactionLog").innerHTML += "The plantoid received a new proposal: "+ result.args.url+ " from " + result.args._proposer+ "<br/>";
});

var VotingProposalEvent = plantoid.VotingProposal();
VotingProposalEvent.watch(function(err, result) {
  if(err) { console.log(err); return; }
  console.log("VOTED proposal Event!");
  console.log(result.args);
  //UpdateProposals(result.args.id);
  updateVotesforPidPos(result.args.pid);
  updateVotesforPidNeg(result.args.pid);

  document.getElementById("transactionLog").innerHTML += "Someone ("+result.args._voter+") is voting on proposal "+result.args.pid+" with reputation("+result.args._reputation+") and vote = "+ result.args._vote+"<br/>";
});


var ExecuteProposalEvent = plantoid.ExecuteProposal();
ExecuteProposalEvent.watch(function(err, result) {
  if(err) { console.log(err); return; }
  getBalance();
  console.log("ExecuteProposal Event!");

  if(result.args.decision == 1) {

      document.getElementById("transactionLog").innerHTML += "We got a winner !!@#!@  :DDD<br/>"
      + "id :" + result.args.id + " pid: " + result.args.pid + " winner address = " + result.args._proposer + "with previous balance = " + result.args.b4balance;
      SeedStatus[result.args.id]=2; SeedWinner[result.args.id] = result.args.pid;
      WinningProposal(result.args.pid);

  } else {
      document.getElementById("transactionLog").innerHTML += "We got a LOOSER !!@#!@  :DDD<br/>"
      SeedStatus[result.args.id]=2;
      LoosingProposal(result.args.pid);

  }
});


var ApprovedExecutionEvent = plantoid.ApprovedExecution();
ApprovedExecutionEvent.watch(function(err, result) {
  console.log("Approved Execution by artist ---> ")
});

/*
var UpgradedEvent = plantoid.Upgraded();
UpgradedEvent.watch(function(err, result) {
  if(err) { console.log(err); return; }
  console.log("UPgraded to" + result.args.implemntation);
  document.getElementById("transactionLog").innerHTML += "UPgraded to" + result.args.implemntation + "<br/>";
});

var FallingBackEvent = plantoid.FallingBack();
FallingBackEvent.watch(function(err, result) {
  if(err) { console.log(err); return; }
  console.log("Falling backkkkkkkkk to" + result.args.implemntation + " with data: " + result.args.data);
  document.getElementById("transactionLog").innerHTML += "Falling backkkkkkkkk to" + result.args.implemntation + " with data: " + result.args.data + "<br>"
});
*/


</script>

</html>
