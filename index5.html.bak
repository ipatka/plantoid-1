<!doctype html>
<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>Plantoids: Blockchain-based life forms</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <link rel="stylesheet" href="http://www.w3schools.com/lib/w3.css">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css">
        <link rel="stylesheet" href="./assets/css/basic-w3.css" />

    </head>

<script src="./web3.js"></script>


<body class="w3-black">


    <!-- Page Content -->
    <div class="w3-padding-large"  id="main">

      <!-- Header -->
      <header class="w3-container w3-padding-32 w3-center " id="home">
        <h1 class="warning w3-xlarge"> This project is still on its alpha phase. We don't guarantee complete security. Play at your own risk !</h3>

          <p>Hello ...</p>
          <h1 class="quote w3-xxxlarge">I'm a Plantoid</h1>
          <p>A Blockchain-based life form.</p>


          <div class="w3-row w3-center wp-padding-16 w3-section">


              <div class="w3-third w3-section w3-left w3-left-align">
                  <p class="quote w3-xxxlarge">Feed Me! </p>

                  <div class="w3-row w3-left w3-left-align w3-section">

                  <div class="w3-col w3-container w3-padding-0" style="width: 50px">
                    <img src="./assets/images/QR6-BTC.png" id="QRcode"  width="45" style="border: 1px solid white; padding: 2px;"><br/>
                    <img src="./assets/images/QR6-ETH.png" id="QRcode"  width="45" style="border: 1px solid white; padding: 2px;">
                    <hr style="border:black; padding-bottom: 3px;"/>
                    <img src="./assets/images/metamask.png" width="45" style="padding: 2px;">
                  </div>

                  <div class="w3-rest w3-container w3-padding-small">
                    <span class="w3-small">BITCOIN:</span><br/>
                    <span class="w3-tiny">16utCvJynaAfk8wPb6LnnnXtLP3t3o8ZGQ</span>  <br/>
                    <span class="w3-small">ETHER:</span><br/>
                    <span class="w3-tiny">0xace3F6d73b5a51CDe204F47008a4f009283032f3</span>
                    <hr/>
                    Send money via Metamask <br/>
                    <span class="w3-small">Amount (in Wei):</span> <input type="text" id="amount">
                    <input type="image" src="./assets/images/send.png" id="feed" onclick="sendFunds()">
                  </div>

                  </div>

              </div>

              <div class="w3-third w3-section">
                   <img src="./assets/images/header-small.png" alt="plantoid"  height="250px" >
              </div>

              <div class="w3-third w3-section w3-left w3-left-align">

                <div class="w3-col w3-container w3-quarter w3-padding-0">
                    <span class="w3-small">Address: </span><br/>
                    <span class="w3-small">Creator: </span><br/>
                    <span class="w3-small">Parent: </span><br/>
                    <hr>
                    <span class="w3-medium">Ownership: </span><br/>
                    <table id="owners"></table>
                    <hr>
                </div>

                <div class="w3-col w3-container w3-threequarter w3-padding-0">
                    <span class="w3-tiny">0x618f5e9038b72cFD3075Fd2447cbE91c9C4C236E</span><br/>
                    <span class="w3-tiny" id="PlantoidCreator"></span><br/>
                    <span class="w3-tiny" id="PlantoidParent"></span><br/>
                </div>

                <div class="w3-row w3-cell-row w3-left w3-left-align">

                  <div class="w3-col w3-cell w3-quarter w3-padding-0">
                    <p><span class="w3-medium">Current<br/>balance:</span></p>
                    <p><span class="w3-medium">Required<br/>threshold:</span></p>
                  </div>
                  <div class="w3-col w3-cell w3-half w3-center w3-center-align">
                      <span class="w3-xxlarge" id="balance"> ??? </span>
                      <hr style="width: 100px;  margin: auto; margin-top: 10px; margin-bottom:10px;">
                      <span class="w3-xxlarge" id="PlantoidThreshold">???</span>
                  </div>
                  <div class="w3-col w3-cell w3-quarter w3-padding-0 ">
                      <br/><br/>WEI
                  </div>
                </div>

                <div class="w3-row w3-section w3-left w3-left-align">
                  Current Seed count = <span id="Seedcnt"></span><br>
                </div>
          </div>

      </header>


<hr/>
<table id="SeedTable"></table>
<hr/>
<div id="transactionLog"></div>

</div>
</body>







<script>

console.log("we start here");
const Web3 = require('web3');
var web3;

if(typeof web3 !== 'undefined') {
  console.log("here");
	web3 = new Web3(web3.currentProvider);
  console.log("web333-current: " + web3);

} else {
  console.log("there");
//	web3 = new Web3(new Web3.providers.HttpProvider("https://ropsten.infura.io/v3/3e0e337a9e144b08b56d2b1b35f3c90b"));
//  web3 = new Web3('wss://ropsten.infura.io/ws');
    web = new Web3(new Web3.providers.WebsocketProvider('ws://ropsten.infura.io/ws'));
  console.log("web333-infura: " + web3);
}



// Modern dapp browsers...
    if (window.ethereum) {
        window.web3 = new Web3(ethereum);
        try {
            // Request account access if needed
            //await ethereum.enable();
            ethereum.enable();
            // Acccounts now exposed
          //  web3.eth.sendTransaction({/* ... */});
        } catch (error) {
            // User denied account access...
        }
    }
    // Legacy dapp browsers...
    else if (window.web3) {
        window.web3 = new Web3(web3.currentProvider);
        // Acccounts always exposed
      //  web3.eth.sendTransaction({/* ... */});
    }
    // Non-dapp browsers...
    else {
        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');
    }


web3.eth.defaultAccount = web3.eth.accounts[0];
console.log("account 0 = " + web3.currentProvider);
console.log("account ===" + web3.eth.defaultAccount);



var plantoid = web3.eth.contract([{"constant":true,"inputs":[],"name":"genesisParams","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"orgHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"seedCnt","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"Administrators","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"genesisProtocolParams","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"pid2id","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"threshold","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"artist","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"amOrgHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"amVoteMachine","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"parent","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"hcVoteMachine","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"amParams","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"save1","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"seeds","outputs":[{"name":"id","type":"uint256"},{"name":"status","type":"uint256"},{"name":"weiRaised","type":"uint256"},{"name":"reputation","type":"address"},{"name":"nProposals","type":"uint256"},{"name":"winningProposal","type":"bytes32"},{"name":"winpid","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"AdminRep","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_donor","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"_seed","type":"uint256"}],"name":"GotDonation","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_donor","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"_seed","type":"uint256"}],"name":"AcceptedDonation","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"seedCnt","type":"uint256"}],"name":"Reproducing","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"uint256"},{"indexed":false,"name":"pid","type":"bytes32"},{"indexed":false,"name":"_proposer","type":"address"},{"indexed":false,"name":"url","type":"string"}],"name":"NewProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"uint256"},{"indexed":false,"name":"pid","type":"bytes32"},{"indexed":false,"name":"_voter","type":"address"},{"indexed":false,"name":"_reputation","type":"uint256"},{"indexed":false,"name":"_vote","type":"uint256"}],"name":"VotingProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"uint256"},{"indexed":false,"name":"pid","type":"bytes32"},{"indexed":false,"name":"_voter","type":"address"},{"indexed":false,"name":"_reputation","type":"uint256"},{"indexed":false,"name":"_vote","type":"uint256"}],"name":"VotingAMProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"uint256"},{"indexed":false,"name":"pid","type":"bytes32"},{"indexed":false,"name":"decision","type":"int256"},{"indexed":false,"name":"_proposer","type":"address"},{"indexed":false,"name":"b4balance","type":"uint256"},{"indexed":false,"name":"url","type":"string"}],"name":"ExecuteProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"voteMachine","type":"address"}],"name":"NewVotingMachine","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pid","type":"bytes32"},{"indexed":false,"name":"addr","type":"address"},{"indexed":false,"name":"_decision","type":"int256"}],"name":"Execution","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"uint256"},{"indexed":false,"name":"pid","type":"bytes32"},{"indexed":false,"name":"winpid","type":"bytes32"}],"name":"ApprovedExecution","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"uint256"},{"indexed":false,"name":"pid","type":"bytes32"},{"indexed":false,"name":"winpid","type":"bytes32"}],"name":"VetoedExecution","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_owner","type":"address"},{"indexed":false,"name":"rep","type":"uint256"}],"name":"ReputationOf","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"uint256"},{"indexed":false,"name":"winpid","type":"bytes32"}],"name":"NewAMProposal","type":"event"},{"constant":false,"inputs":[],"name":"init","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_voteM","type":"address"}],"name":"setHCVotingMachine","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_voteM","type":"address"},{"name":"_owners","type":"address[]"}],"name":"setAMVotingMachine","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"getAdmins","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_admin","type":"address"}],"name":"getAdminBalance","outputs":[{"name":"","type":"address"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getSeed","outputs":[{"name":"status","type":"uint256"},{"name":"weis","type":"uint256"},{"name":"reputation","type":"address"},{"name":"nProps","type":"uint256"},{"name":"winner","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getWinpid4Seed","outputs":[{"name":"","type":"bytes32"},{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_id","type":"uint256"},{"name":"_url","type":"string"}],"name":"addProposal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_id","type":"uint256"}],"name":"addAMProposal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_id","type":"uint256"},{"name":"_pid","type":"bytes32"},{"name":"_vote","type":"uint256"}],"name":"voteProposal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_id","type":"uint256"},{"name":"_pid","type":"bytes32"},{"name":"_vote","type":"uint256"}],"name":"voteAMProposal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"},{"name":"_pid","type":"bytes32"}],"name":"getProposal","outputs":[{"name":"pid","type":"bytes32"},{"name":"from","type":"address"},{"name":"url","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"fund","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"pid","type":"bytes32"},{"name":"decision","type":"int256"}],"name":"executeProposal","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_pid","type":"bytes32"}],"name":"approveExecution","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_pid","type":"bytes32"}],"name":"vetoExecution","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"pid","type":"bytes32"}],"name":"getTotalReputationSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256"},{"name":"_beneficiary","type":"address"},{"name":"pid","type":"bytes32"}],"name":"mintReputation","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256"},{"name":"_beneficiary","type":"address"},{"name":"pid","type":"bytes32"}],"name":"burnReputation","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"pid","type":"bytes32"}],"name":"reputationOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_stakingToken","type":"address"},{"name":"_beneficiary","type":"address"},{"name":"_amount","type":"uint256"},{"name":"","type":"bytes32"}],"name":"stakingTokenTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"bytes32"}],"name":"balanceOfStakingToken","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}]).at("0x618f5e9038b72cFD3075Fd2447cbE91c9C4C236E");
var genesis = web3.eth.contract([{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"parameters","outputs":[{"name":"queuedVoteRequiredPercentage","type":"uint256"},{"name":"queuedVotePeriodLimit","type":"uint256"},{"name":"boostedVotePeriodLimit","type":"uint256"},{"name":"preBoostedVotePeriodLimit","type":"uint256"},{"name":"thresholdConst","type":"uint256"},{"name":"limitExponentValue","type":"uint256"},{"name":"quietEndingPeriod","type":"uint256"},{"name":"proposingRepReward","type":"uint256"},{"name":"votersReputationLossRatio","type":"uint256"},{"name":"minimumDaoBounty","type":"uint256"},{"name":"daoBountyConst","type":"uint256"},{"name":"activationTime","type":"uint256"},{"name":"voteOnBehalf","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_params","type":"uint256[11]"},{"name":"_voteOnBehalf","type":"address"}],"name":"getParametersHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"NO","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"proposalsCnt","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_paramsHash","type":"bytes32"},{"name":"_organizationId","type":"bytes32"}],"name":"threshold","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"DELEGATION_HASH_EIP712","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"proposals","outputs":[{"name":"organizationId","type":"bytes32"},{"name":"callbacks","type":"address"},{"name":"state","type":"uint8"},{"name":"winningVote","type":"uint256"},{"name":"proposer","type":"address"},{"name":"currentBoostedVotePeriodLimit","type":"uint256"},{"name":"paramsHash","type":"bytes32"},{"name":"daoBountyRemain","type":"uint256"},{"name":"daoBounty","type":"uint256"},{"name":"totalStakes","type":"uint256"},{"name":"confidenceThreshold","type":"uint256"},{"name":"secondsFromTimeOutTillExecuteBoosted","type":"uint256"},{"name":"daoRedeemItsWinnings","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"calcExecuteCallBounty","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_proposalId","type":"bytes32"},{"name":"_beneficiary","type":"address"}],"name":"redeemDaoBounty","outputs":[{"name":"redeemedAmount","type":"uint256"},{"name":"potentialAmount","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"stakingToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"shouldBoost","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"","type":"uint256"},{"name":"_paramsHash","type":"bytes32"},{"name":"_proposer","type":"address"},{"name":"_organization","type":"address"}],"name":"propose","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_params","type":"uint256[11]"},{"name":"_voteOnBehalf","type":"address"}],"name":"setParameters","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"NUM_OF_CHOICES","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"stakesNonce","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"YES","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"organizations","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"averagesDownstakesOfBoosted","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"executeBoosted","outputs":[{"name":"expirationCallBounty","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_proposalId","type":"bytes32"},{"name":"_beneficiary","type":"address"}],"name":"redeem","outputs":[{"name":"rewards","type":"uint256[3]"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"orgBoostedProposalsCnt","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_stakingToken","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":true,"name":"_organization","type":"address"},{"indexed":true,"name":"_staker","type":"address"},{"indexed":false,"name":"_vote","type":"uint256"},{"indexed":false,"name":"_amount","type":"uint256"}],"name":"Stake","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":true,"name":"_organization","type":"address"},{"indexed":true,"name":"_beneficiary","type":"address"},{"indexed":false,"name":"_amount","type":"uint256"}],"name":"Redeem","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":true,"name":"_organization","type":"address"},{"indexed":true,"name":"_beneficiary","type":"address"},{"indexed":false,"name":"_amount","type":"uint256"}],"name":"RedeemDaoBounty","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":true,"name":"_organization","type":"address"},{"indexed":true,"name":"_beneficiary","type":"address"},{"indexed":false,"name":"_amount","type":"uint256"}],"name":"RedeemReputation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":false,"name":"_proposalState","type":"uint8"}],"name":"StateChange","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":false,"name":"_executionState","type":"uint8"}],"name":"GPExecuteProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":true,"name":"_beneficiary","type":"address"},{"indexed":false,"name":"_amount","type":"uint256"}],"name":"ExpirationCallBounty","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":false,"name":"_confidenceThreshold","type":"uint256"}],"name":"ConfidenceLevelChange","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":true,"name":"_organization","type":"address"},{"indexed":false,"name":"_numOfChoices","type":"uint256"},{"indexed":false,"name":"_proposer","type":"address"},{"indexed":false,"name":"_paramsHash","type":"bytes32"}],"name":"NewProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":true,"name":"_organization","type":"address"},{"indexed":false,"name":"_decision","type":"uint256"},{"indexed":false,"name":"_totalReputation","type":"uint256"}],"name":"ExecuteProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":true,"name":"_organization","type":"address"},{"indexed":true,"name":"_voter","type":"address"},{"indexed":false,"name":"_vote","type":"uint256"},{"indexed":false,"name":"_reputation","type":"uint256"}],"name":"VoteProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":true,"name":"_organization","type":"address"}],"name":"CancelProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":true,"name":"_organization","type":"address"},{"indexed":true,"name":"_voter","type":"address"}],"name":"CancelVoting","type":"event"},{"constant":false,"inputs":[{"name":"_proposalId","type":"bytes32"},{"name":"_vote","type":"uint256"},{"name":"_amount","type":"uint256"}],"name":"stake","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_proposalId","type":"bytes32"},{"name":"_vote","type":"uint256"},{"name":"_amount","type":"uint256"},{"name":"_nonce","type":"uint256"},{"name":"_signatureType","type":"uint256"},{"name":"_signature","type":"bytes"}],"name":"stakeWithSignature","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_proposalId","type":"bytes32"},{"name":"_vote","type":"uint256"},{"name":"_amount","type":"uint256"},{"name":"_voter","type":"address"}],"name":"vote","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"cancelVote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"execute","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"getNumberOfChoices","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"getProposalTimes","outputs":[{"name":"times","type":"uint256[3]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"},{"name":"_voter","type":"address"}],"name":"voteInfo","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"},{"name":"_choice","type":"uint256"}],"name":"voteStatus","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"isVotable","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"proposalStatus","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"getProposalOrganization","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"},{"name":"_staker","type":"address"}],"name":"getStaker","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"},{"name":"_vote","type":"uint256"}],"name":"voteStake","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"winningVote","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"state","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isAbstainAllow","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getAllowedRangeOfChoices","outputs":[{"name":"min","type":"uint256"},{"name":"max","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"score","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}]).at("0x94dbf4Ba8f824cf30fE979856DCf7bDb6C049401");
var absolute = web3.eth.contract([{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"parameters","outputs":[{"name":"precReq","type":"uint256"},{"name":"voteOnBehalf","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"proposalsCnt","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"proposals","outputs":[{"name":"organizationId","type":"bytes32"},{"name":"open","type":"bool"},{"name":"callbacks","type":"address"},{"name":"numOfChoices","type":"uint256"},{"name":"paramsHash","type":"bytes32"},{"name":"totalVotes","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MAX_NUM_OF_CHOICES","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"organizations","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":false,"name":"_isProxyVote","type":"bool"}],"name":"AVVoteProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":true,"name":"_organization","type":"address"},{"indexed":false,"name":"_numOfChoices","type":"uint256"},{"indexed":false,"name":"_proposer","type":"address"},{"indexed":false,"name":"_paramsHash","type":"bytes32"}],"name":"NewProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":true,"name":"_organization","type":"address"},{"indexed":false,"name":"_decision","type":"uint256"},{"indexed":false,"name":"_totalReputation","type":"uint256"}],"name":"ExecuteProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":true,"name":"_organization","type":"address"},{"indexed":true,"name":"_voter","type":"address"},{"indexed":false,"name":"_vote","type":"uint256"},{"indexed":false,"name":"_reputation","type":"uint256"}],"name":"VoteProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":true,"name":"_organization","type":"address"}],"name":"CancelProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_proposalId","type":"bytes32"},{"indexed":true,"name":"_organization","type":"address"},{"indexed":true,"name":"_voter","type":"address"}],"name":"CancelVoting","type":"event"},{"constant":false,"inputs":[{"name":"_numOfChoices","type":"uint256"},{"name":"_paramsHash","type":"bytes32"},{"name":"","type":"address"},{"name":"_organization","type":"address"}],"name":"propose","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_proposalId","type":"bytes32"},{"name":"_vote","type":"uint256"},{"name":"_amount","type":"uint256"},{"name":"_voter","type":"address"}],"name":"vote","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"cancelVote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"execute","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"getNumberOfChoices","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"},{"name":"_voter","type":"address"}],"name":"voteInfo","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"},{"name":"_choice","type":"uint256"}],"name":"voteStatus","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"isVotable","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isAbstainAllow","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getAllowedRangeOfChoices","outputs":[{"name":"min","type":"uint256"},{"name":"max","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"_precReq","type":"uint256"},{"name":"_voteOnBehalf","type":"address"}],"name":"setParameters","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_precReq","type":"uint256"},{"name":"_voteOnBehalf","type":"address"}],"name":"getParametersHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"}]).at("BSOLUTE");
var proxy = web3.eth.contract([{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"genesisProtocolParams","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"threshold","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"artist","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"_implementation","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"parent","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_artist","type":"address"},{"name":"_parent","type":"address"},{"name":"_threshold","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"constant":true,"inputs":[],"name":"implementation","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"impl","type":"address"}],"name":"upgradeTo","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]).at("0x618f5e9038b72cFD3075Fd2447cbE91c9C4C236E");



var threshold;

var SeedCounter = 0;
var SeedStatus = [];
var SeedWinner = [];
var SeedLoosers = [];

setTimeout(getBalance(), 20000);
setTimeout(getInfo(), 20000);


function getBalance() {
	web3.eth.getBalance(plantoid.address, (e,r)=>{document.getElementById('balance').innerHTML =  r;});
}


function getInfo() {

  //proxy._implementation.call(function(err, res) {
  proxy.artist.call(function(err, res) {
    document.getElementById('PlantoidCreator').innerHTML = res;
  });

  plantoid.parent.call(function(err, res) {
    document.getElementById('PlantoidParent').innerHTML = res;
  });
  plantoid.threshold.call(function(err, res) {
    document.getElementById('PlantoidThreshold').innerHTML =  web3.fromWei(res, 'wei') ;
    threshold = res;
  });

  ListAdmins();

  ListSeeds();
}


function ListAdmins() {

  plantoid.getAdmins.call( function(err, values) {
    console.log("GET ADMINS: ");
    console.log(values);

    var own = document.getElementById('owners');
    for(var i = 0; i < values.length; i++) {
      plantoid.getAdminBalance.call(values[i], function (err,v){
        own.innerHTML += '<td><span class="w3-tiny">' + v[0] + '</td><td>(' + v[1] + '%)</span></td><tr/>';
      });
    }
   });

}

var rows = 0;

function ListSeeds() {

  plantoid.seedCnt.call(function(err, res) {
    console.log("updating seeds, with new counter: " + res);

    SeedCounter = res;
    document.getElementById('Seedcnt').innerHTML = SeedCounter;

    for(var i = 0; i <= SeedCounter; i++) {
        CreateSeeds(i); console.log("creating seed.... " + i);
    }
  });
}


  function CreateSeeds(i) {

      var table = document.getElementById("SeedTable");

      plantoid.seedCnt.call(function(err, res) {
        if(i > res) { return; }
        else {
            SeedCounter = res;
            document.getElementById('Seedcnt').innerHTML = SeedCounter;


            plantoid.getSeed.call(i, function(err, values) {
            //  console.log("seed # "+ i + ": " + values);

              SeedStatus[i] = values[0];
              console.log("CREATING NEW SEED WITH SEED STATUS = " + values[0]);

              if(SeedStatus[i] == 3) {  SeedWinner[i] = values[4];  }

              var row = document.getElementById("Seed"+i);
            //  console.log("-------------> checking Seed"+i+" ======>> "+ row);
              if(row) { return; }

              CreateStandardSeed(i, values);
          });
        }

      });

}

  function CreateStandardSeed(i, values) {

      var table = document.getElementById("SeedTable");

        var row = table.insertRow(rows++);
        row.id = "Seed" + i;
        var cell1 = row.insertCell(0); cell1.style.width = '75px';
        var cell2 = row.insertCell(1); cell2.style.width = '75px';
        var cell3 = row.insertCell(2); cell3.style.width = '100px';
        var cell4 = row.insertCell(3);
        cell1.innerHTML = "Seed<br/># " + i;
        cell2.innerHTML = "Status:<br/>" + values[0];
        cell3.innerHTML = "Funds:<br/>" + values[1] + " / " + threshold;
        if(SeedStatus[i] == 1 || SeedStatus[i] == 2) {
              cell4.innerHTML =
              '<span class="submitText">Submit a proposal:<br/></span>' +
              '<input type="text" class="propInput" id="propURL'+i+'" size=60 placeholder="Enter link to proposal (HTML or IPFS)">' +
              '<input type="image" src="./assets/images/send2.png" id="feed" onclick="sendProposal(' + i +')"/>';
        }

        var row2 = table.insertRow(rows++);
        row2.insertCell(0);
        row2.insertCell(1);
        row2.insertCell(2);
        var cell = row2.insertCell(3);
        cell.id = "Seedrow" + i;

        UpdateProposals4Seed(i);

  }




    function UpdateSeeds(i) {
      var table = document.getElementById("SeedTable");
      console.log("looking for..,,.,.,.,.,.,.,.: "+"Seed"+i);
      var row = document.getElementById("Seed"+i);  console.log("raw Seed+"+i+" = " + row);
      var row2 = document.getElementById("Seedrow"+i); console.log("raw Seedrow+"+i+" = " + row2);
      if(row) {
        row.parentNode.removeChild(row);
        row2.parentNode.removeChild(row2);
        rows -= 2;
        CreateSeeds(i);  console.log("CREATING SEED # " + i);
      }
    }



    function UpdateAllProposals() {
      plantoid.seedCnt.call(function(err, res) {
        console.log("updating seeds, with new counter: " + res);
        for(var j=0; j<res; j++) {
          UpdateProposals4Seed(j);
        }
      });
    }

   function UpdateProposals4Seed(i) {


      console.log("updating proposals for Seed # " + i);

      //first collect the list of Vetoed proposals
      plantoid.VetoedExecution({}, {fromBlock: 0, toBlock: 'latest'}).get((eerr, eev) => {
        if(eerr)
          console.log('Error in VetoedExecution handler: '+ eerr);

        else {

          var pC = eev.length;
          for(var m = 0; m < pC; m++) {
            var res = eev[m].args;
            if(!SeedLoosers[res.id]) { SeedLoosers[res.id] = new Array(); }
            SeedLoosers[res.id].push(res.pid);
          }

      //first collect the list of loosing Proposals
      plantoid.ExecuteProposal({}, {fromBlock: 0, toBlock: 'latest'}).get((err, ev) => {
        if(err)
          console.log('Error in ExecuteProposal handler: '+ err);

        else {

          var propC = ev.length; console.log("******** length of EXECUTED props == "+ ev.length);

            for(var k = 0; k < propC; k++) {
              var results = ev[k].args;  console.log("curennt decision === " + results.decision);

              if(! SeedStatus[results.id]) { console.log("returning........."); return; }

              if(SeedLoosers[results.id] && SeedLoosers[results.id].indexOf(results.pid)!= -1) { console.log("continueeeeeeee..."); continue; }

              if((results.decision == 1) && (SeedStatus[results.id]!=1)) {
                SeedWinner[results.id] = results.pid;
                console.log("we got a winer?!?!?  with seed status = " + SeedStatus[results.id]);

              } else {
                console.log('inserting looser PID as === '+results.pid);
                if(!SeedLoosers[results.id]) { SeedLoosers[results.id] = new Array(); }
                SeedLoosers[results.id].push(results.pid);
                console.log("OVERALL ARRAY OF LOSERS: "+ SeedLoosers[results.id]);
              }
            }



      //then collect the list of proposals for Seed = i
      plantoid.NewProposal({}, {fromBlock: 0, toBlock: 'latest'}).get((error, eventResult) => {
        if(error)
          console.log('Error in NewProposal handler: '+ error);
        else {

          var propCounter = eventResult.length;


            for(var j = 0; j < propCounter; j++) {

              var args = eventResult[j].args;
             console.log("processing proposition ... " + args.url + " from ID = " + args.id + " of---- " + i);

              var w1 = ""; var w2 = "";
              var d = "";


              if(args.id == i) {

                  var cell = document.getElementById('Seedrow' + args.id);
                  var prop = document.getElementById("Proposal"+args.pid);

                  if(! prop) {
                     console.log('No prop for .....' + args.pid + '........ '+prop);

                    var g = document.createElement('div'); g.setAttribute("id", "Proposal"+args.pid);
                    cell.appendChild(g);

                        if( (SeedStatus[args.id]==2)  && (SeedWinner[args.id] == args.pid)) {
                          w1 = '<span class="winProp">';
                          w2 = '</span>';
                          d = 'disabled';
                        }  else if( (SeedStatus[args.id]==3) && (SeedWinner[args.id] == args.pid)) {
                            w1 = '<span class="winnerProp">';
                            w2 = '</span>';
                            d = 'disabled';
                        }  else if( SeedLoosers[args.id] && (SeedLoosers[args.id].indexOf(args.pid)!= -1)) {
                            w1 = '<span class="looseProp">';
                            w2 = '</span>';
                            d = 'disabled';
                          }





                      g.innerHTML += '<span id="PID' + args.pid+'">' + w1 + "Proposal # " + args.pid + " : <a href='"+args.url+"'>"+args.url+"</a>"+ w2 + " <br></span>"
                      g.innerHTML += "<span class='from'>(from: <i>"+args._proposer+"</i>) <br></span>";
                      g.innerHTML += '<input type="image" src="./assets/images/upvote' + d + '.png" height=25 id="vote" onClick="voteProposal(' + args.id +',\''+ args.pid+'\', 1)"' + d + '/>';
                      g.innerHTML += "<span id='VotesPos"+args.pid+"'> 0% </span>";
                      g.innerHTML += '<input type="image" src="./assets/images/downvote' + d + '.png" height=20 id="vote" onClick="voteProposal(' + args.id +',\''+ args.pid+'\', 2)"' + d + '/>';
                      g.innerHTML += "<span id='VotesNeg"+args.pid+"'> 0% </span>";

/*
                      cell.innerHTML += '<input type="image" src="./images/upvote.png" height=25 id="vote" onclick="voteProposal(' + args.id +',\''+ args.pid+'\', 1)"' +
                      ((SeedStatus[args.id]==1) && ( (!SeedLoosers[args.id]) || (SeedLoosers[args.id].indexOf(args.pid)==-1) ) || 'disabled') +'/> ';
                      cell.innerHTML += '<input type="image" src="./images/downvote.png" height=20 id="vote" onclick="voteProposal(' + args.id +',\''+ args.pid+'\', 2)"' +
                      ((SeedStatus[args.id]==1) && ( (!SeedLoosers[args.id]) || (SeedLoosers[args.id].indexOf(args.pid)==-1) ) || 'disabled') +'/> <br/>';
*/
                      if( (SeedStatus[args.id]==2) && (SeedWinner[args.id] == args.pid)) {
                        showApproveVeto(args.id, args.pid)
                    //    g.innerHTML += '<button type="button" id="approve" onClick="ApprovePid(\'' + args.pid + '\')">Approve</button>';
                    //    g.innerHTML += '<button type="button" id="veto" onclick="VetoPid(\'' + args.pid + '\')">Veto</button>';
                      }

                      //g.innerHTML += "<br/><br/>"

                      updateVotesforPidPos(args.pid);
                      updateVotesforPidNeg(args.pid);

                    }
                    else { console.log('PRPOSITION already exists...'); }

                } else { console.log(args.id + " != " + i);}
              }
          }
      });
    }
  });
}
});
}




function updateVotesforPidPos(pid) {
  genesis.voteStatus.call(pid, 1, function(err, val) {
    var p = document.getElementById("VotesPos"+pid);
    var n = val / threshold * 100;
    if(p) p.innerHTML = n.toFixed(0) + "%"; // will need to fix this once reputation starts changing !
  });
}

function updateVotesforPidNeg(pid) {
  genesis.voteStatus.call(pid, 2, function(err, val) {
    var p = document.getElementById("VotesNeg"+pid);
    var n = val / threshold * 100;
    if(p) p.innerHTML = n.toFixed(0) + "%"; // will need to fix this once reputation starts changing !
  });
}



function updateProposalbyPid(args) {

  var prop = document.getElementById("Proposal"+args.pid);

  //console.log("looking for Prop (" + prop + ") with args.pid = " + args.pid);

if(prop) {
  var w1 = ""; var w2 = "";
  var d = "";

  ///console.log('Args.id === ' + args.id + ' seedStatus = ' + SeedStatus[args.id] + ' SeedWinner = ' + SeedWinner[args.id]);


  if( SeedLoosers[args.id] && (SeedLoosers[args.id].indexOf(args.pid)!= -1)) {
    w1 = '<span class="looseProp">';
    w2 = '</span>';
    d = 'disabled';
  } else if( (SeedStatus[args.id]==2) && (SeedWinner[args.id] == args.pid)) {
    w1 = '<span class="winProp">';
    w2 = '</span>';
    d = 'disabled';
  } else if( (SeedStatus[args.id]==3) && (SeedWinner[args.id] == args.pid)) {
    w1 = '<span class="winnerProp">';
    w2 = '</span>';
    d = 'disabled';
  }

//  var spans = prop.querySelectorAll("span");
//  var url = spans[0].querySelector("a");
  var url = prop.querySelector("a");
  var _proposer = prop.querySelector("i");

  prop.innerHTML = "";

  prop.innerHTML += '<span id="PID' + args.pid+'">' + w1 + "Proposal # " + args.pid + " : <a href='"+url+"'>"+url+"</a>"+ w2 + " <br></span>"
  prop.innerHTML += "<span class='from'>(from: <i>"+_proposer.innerHTML+"</i>) <br></span>";
  prop.innerHTML += '<input type="image" src="./assets/images/upvote' + d + '.png" height=25 id="vote" onClick="voteProposal(' + args.id +',\''+ args.pid+'\', 1)"' + d + '/>';
  prop.innerHTML += "<span id='VotesPos"+args.pid+"'> 00 </span>";
  prop.innerHTML += '<input type="image" src="./assets/images/downvote' + d + '.png" height=20 id="vote" onClick="voteProposal(' + args.id +',\''+ args.pid+'\', 2)"' + d + '/>';
  prop.innerHTML += "<span id='VotesNeg"+args.pid+"'> 00 </span>";

  if( (SeedStatus[args.id]==2) && (SeedWinner[args.id] == args.pid)) {
    showApproveVeto(args.id, args.pid);
  //  prop.innerHTML += '<button type="button" id="approve" onClick="ApprovePid(\'' + args.pid + '\')">Approve</button>';
  //  prop.innerHTML += '<button type="button" id="veto" onclick="VetoPid(\'' + args.pid + '\')">Veto</button>';
  }

  //prop.innerHTML += "<br/><br/>"

  updateVotesforPidPos(args.pid);
  updateVotesforPidNeg(args.pid);

}
}




function WinningProposal(args) {
/*  var cell = document.getElementById("PID"+args.pid);
  var content = cell.innerHTML;
  var w1 = '<span class="winProp">';
  var w2 = '</span>';
  cell.innerHTML = w1+content+w2;
*/


  SeedWinner[args.id] = args.pid;
  updateProposalbyPid(args)

}

function LoosingProposal(args) {
/*  var cell = document.getElementById("PID"+args.pid);
  var content = cell.innerHTML;
  var w1 = '<span class="looseProp">';
  var w2 = '</span>';
  cell.innerHTML = w1+content+w2;
*/
if(!SeedLoosers[args.id]) { SeedLoosers[args.id] = new Array(); }
SeedLoosers[args.id].push(args.pid);
  updateProposalbyPid(args)

}

function ApprovePid(id, winpid) {
//    plantoid.approveExecution(args, function(err, values) {
    var _vote = 1;
      plantoid.voteAMProposal(id, winpid, _vote, {gas: 7000000}, function(err, values) {
          console.log("approving execution.... " );
    });
}

function VetoPid(id, winpid) {
//  plantoid.vetoExecution(args, function(err, values) {
    var _vote = 2;
    console.log("vetoooing execution.... with following parameters : ID= "+id+" winpid = "+winpid );

    plantoid.voteAMProposal(id, winpid, _vote, function(err, values) {
          console.log("vetoooing execution.... " );
  });

}

function sendFunds() {
	var amount = document.getElementById("amount").value;
	//amount = web3.toWei(amount, "ether");
	//web3.eth.sendTransaction({to:'ETH', from: '0x64EB4dfcC14B96582D8D5095e9894b279E519b4B', value:amount}, (e)=>{console.log(e)});
	//plantoid.fund({value: amount});
  web3.eth.sendTransaction({to:'0x618f5e9038b72cFD3075Fd2447cbE91c9C4C236E',  value:amount, gas:2500000}, (e)=>{console.log(e)});

}

function sendProposal(id) {
  var url = document.getElementById("propURL"+id).value;
  plantoid.addProposal(id, url, function(err, values) {
    console.log("sending new proposal for ID "+ id + " : " + url);
  });
}

function voteProposal(id, pid, vote) {
  plantoid.voteProposal(id, pid, vote, {gas: 7000000}, function(err, values) {
        console.log("voting on proposal ID: "+ pid + "for Seed: "+id + "with decision = " + vote);
   });
  console.log("voting on proposal ID: "+ pid + " for Seed: "+id +"   -> "+ typeof(pid.toString()));

}




/*
plantoid.allEvents({fromBlock:'latest'}, function (error,event){
    if (error) {
      console.log(error)
    } else {
      console.log("All Events")
      console.log(event);
    }
  });
*/

var DonationEvent = plantoid.GotDonation();
DonationEvent.watch(function(err, result) {
  if(err) { console.log(err); return; }
  console.log("GotDonation!!! ");
  console.log(result.args);
  getBalance();
  UpdateSeeds(result.args._seed);
  document.getElementById("transactionLog").innerHTML += "Got Donation of " + web3.fromWei(result.args.amount, 'ether') + " by donor: " + result.args._donor +" <br/>";
});

var DonationAccepted = plantoid.AcceptedDonation();
DonationAccepted.watch(function(err, result) {
  if(err) { console.log(err); return; }
  console.log("ACCEPTED Donation!!! ");
  console.log(result.args);
  getBalance();
  UpdateSeeds(result.args._seed);
  document.getElementById("transactionLog").innerHTML += "Accepted Donation of " + web3.fromWei(result.args.amount, 'ether') + " from donor: " + result.args._donor +" <br/>";
});


var ReproductionEvent = plantoid.Reproducing();
ReproductionEvent.watch(function(err, result) {
  if(err) { console.log(err); return; }
  console.log("Reproduction Event from: "+ result.args.seedCnt);
  document.getElementById("transactionLog").innerHTML += "The plantoid's Seed #"+result.args.seedCnt+" is reproducing itself !!!!  :DDD<br/>";
  UpdateSeeds(result.args.seedCnt);
  CreateSeeds(Number(SeedCounter)+1);
});



var NewProposalEvent = plantoid.NewProposal();
NewProposalEvent.watch(function(err, result) {
  if(err) { console.log(err); return; }
  console.log("NewProposal Event!");
  console.log(result.args);
  UpdateProposals4Seed(Number(result.args.id));
  document.getElementById("transactionLog").innerHTML += "The plantoid received a new proposal: "+ result.args.url+ " from " + result.args._proposer+ "<br/>";
});

var NewAMProposalEvent = plantoid.NewAMProposal();
NewProposalEvent.watch(function(err, result) {
  if(err) { console.log(err); return; }
  console.log("New((((AM))))Proposal Event!");
  document.getElementById("transactionLog").innerHTML += "The plantoid received a new AM proposal: "+ result.args.id+ " winpid: " + result.args.winpid+ "<br/>";
});

var VotingProposalEvent = plantoid.VotingProposal();
VotingProposalEvent.watch(function(err, result) {
  if(err) { console.log(err); return; }
  console.log("VOTED proposal Event!");
  console.log(result.args);
  //UpdateProposals(result.args.id);
  updateVotesforPidPos(result.args.pid);
  updateVotesforPidNeg(result.args.pid);

  document.getElementById("transactionLog").innerHTML += "Someone ("+result.args._voter+") is voting on proposal "+result.args.pid+" with reputation("+result.args._reputation+") and vote = "+ result.args._vote+"<br/>";
});


var ExecuteProposalEvent = plantoid.ExecuteProposal();
ExecuteProposalEvent.watch(function(err, result) {
  if(err) { console.log(err); return; }
  getBalance();
  console.log("ExecuteProposal Event! with decision == " + result.args.decision);

  if(result.args.decision == 1) {

      document.getElementById("transactionLog").innerHTML += "We got a winner !!@#!@  :DDD<br/>"
      + "id :" + result.args.id + " pid: " + result.args.pid + " winner address = " + result.args._proposer + "with previous balance = " + result.args.b4balance;
      SeedStatus[result.args.id]=2; SeedWinner[result.args.id] = result.args.pid;
      WinningProposal(result.args);

  } else {
      document.getElementById("transactionLog").innerHTML += "We got a LOOSER !!@#!@  :DDD<br/>"
      SeedStatus[result.args.id]=2;
      LoosingProposal(result.args);

  }
});


var ApprovedExecutionEvent = plantoid.ApprovedExecution();
ApprovedExecutionEvent.watch(function(err, result) {
  console.log("Approved Execution by artist ---> ")

  SeedStatus[result.args.id] = 3;
  SeedWinner[result.args.id] == result.args.pid
  updateProposalbyPid(result.args);
});



var VetoedExecutionEvent = plantoid.VetoedExecution();

VetoedExecutionEvent.watch(function(err, result) {
  console.log("VETOED Execution by artist --->  " + result.args.pid + " ---- AM : " + result.args.winpid);

  if(!SeedLoosers[result.args.id]) { SeedLoosers[result.args.id] = new Array(); }
  SeedLoosers[result.args.id].push(result.args.pid);

  SeedStatus[result.args.id]= 1;
  SeedWinner[result.args.id] = 0;

  updateProposalbyPid(result.args);
});


function showApproveVeto(id, pid) {

    plantoid.getWinpid4Seed(id, function(e, v) {
      var p = v[0]; var winpid = v[1];

      console.log("WINPID ====== "+ winpid);
      console.log("PID ===" + p);

      var div = document.getElementById("Proposal"+p);
      var g = document.getElementById("Vote-"+winpid);

      console.log("GGGGG ----- " + g + "(and div ====== " + div);

      if(!g) {
        g = document.createElement('span'); g.setAttribute("id", "Vote-"+winpid);
        div.appendChild(g);

        g.innerHTML += '<button type=button class="winpid-button" id="approve-'+winpid+ '" onClick="ApprovePid(\'' + id + '\',\'' + winpid + '\')">Approve</button>';
        g.innerHTML += '<button type=button class="winpid-button" id="veto-'+winpid +   '" onclick="VetoPid(\''    + id + '\',\'' + winpid + '\')">Veto</button>';
      }

  //    cell.innerHTML += '<button type="button" id="approve" onClick="ApprovePid(\'' + args.pid + '\')">Approve</button>';


      console.log("GGGGG ----- " + g + "(and div ====== " + div);


      if(winpid) {
          absolute.voteStatus.call(winpid, 1, function(err, val) {
          var appr = document.getElementById("approve-"+winpid);
          var veto = document.getElementById("veto-"+winpid);
          console.log("VAAAAAAAAAAAAAAL: " + val);
          var n = val ;
          if(appr) appr.innerHTML = "Approve: "+ n.toFixed(0) + "%"; // will need to fix this once reputation starts changing !
          if(veto) veto.innerHTML = "Veto: " +  n.toFixed(0) + "%";
    });

  }

  });


}




/*
var UpgradedEvent = plantoid.Upgraded();
UpgradedEvent.watch(function(err, result) {
  if(err) { console.log(err); return; }
  console.log("UPgraded to" + result.args.implemntation);
  document.getElementById("transactionLog").innerHTML += "UPgraded to" + result.args.implemntation + "<br/>";
});

var FallingBackEvent = plantoid.FallingBack();
FallingBackEvent.watch(function(err, result) {
  if(err) { console.log(err); return; }
  console.log("Falling backkkkkkkkk to" + result.args.implemntation + " with data: " + result.args.data);
  document.getElementById("transactionLog").innerHTML += "Falling backkkkkkkkk to" + result.args.implemntation + " with data: " + result.args.data + "<br>"
});
*/


</script>

</html>
