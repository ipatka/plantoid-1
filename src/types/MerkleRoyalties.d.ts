/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MerkleRoyaltiesInterface extends ethers.utils.Interface {
  functions: {
    "claim(address[],bytes32[][],uint256[])": FunctionFragment;
    "contractBalance(address)": FunctionFragment;
    "lastClaimed(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claim",
    values: [string[], BytesLike[][], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "contractBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastClaimed",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimed",
    data: BytesLike
  ): Result;

  events: {};
}

export class MerkleRoyalties extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MerkleRoyaltiesInterface;

  functions: {
    claim(
      _tokens: string[],
      _proofs: BytesLike[][],
      _splitPoints: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(address[],bytes32[][],uint256[])"(
      _tokens: string[],
      _proofs: BytesLike[][],
      _splitPoints: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    contractBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "contractBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lastClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastClaimed(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  claim(
    _tokens: string[],
    _proofs: BytesLike[][],
    _splitPoints: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(address[],bytes32[][],uint256[])"(
    _tokens: string[],
    _proofs: BytesLike[][],
    _splitPoints: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  contractBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "contractBalance(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastClaimed(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lastClaimed(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    claim(
      _tokens: string[],
      _proofs: BytesLike[][],
      _splitPoints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(address[],bytes32[][],uint256[])"(
      _tokens: string[],
      _proofs: BytesLike[][],
      _splitPoints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    contractBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastClaimed(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    claim(
      _tokens: string[],
      _proofs: BytesLike[][],
      _splitPoints: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claim(address[],bytes32[][],uint256[])"(
      _tokens: string[],
      _proofs: BytesLike[][],
      _splitPoints: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    contractBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastClaimed(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      _tokens: string[],
      _proofs: BytesLike[][],
      _splitPoints: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(address[],bytes32[][],uint256[])"(
      _tokens: string[],
      _proofs: BytesLike[][],
      _splitPoints: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    contractBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contractBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastClaimed(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
