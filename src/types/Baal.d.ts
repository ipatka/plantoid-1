/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BaalInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "checkpoints(address,uint256)": FunctionFragment;
    "claim()": FunctionFragment;
    "convertSharesToLoot(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "delegateSummoners(address[],address[])": FunctionFragment;
    "delegates(address)": FunctionFragment;
    "flashFee(address,uint256)": FunctionFragment;
    "flashFeeNumerator()": FunctionFragment;
    "flashLoan(address,address,uint256,bytes)": FunctionFragment;
    "getCurrentVotes(address)": FunctionFragment;
    "getGuildTokens()": FunctionFragment;
    "getPriorVotes(address,uint256)": FunctionFragment;
    "gracePeriod()": FunctionFragment;
    "lootPaused()": FunctionFragment;
    "maxFlashLoan(address)": FunctionFragment;
    "maxVotingPeriod()": FunctionFragment;
    "memberAction(address,uint96,uint96,bool)": FunctionFragment;
    "members(address)": FunctionFragment;
    "minVotingPeriod()": FunctionFragment;
    "mintLoot(address[],uint96[])": FunctionFragment;
    "mintShares(address[],uint96[])": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "numCheckpoints(address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "permit(address,address,uint96,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "processProposal(uint256)": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "proposalsPassed(uint256)": FunctionFragment;
    "ragequit(address,uint96,uint96)": FunctionFragment;
    "setFlashFeeNumerator(uint32)": FunctionFragment;
    "setGuildTokens(address[])": FunctionFragment;
    "setPeriods(bytes)": FunctionFragment;
    "setShamans(address[],bool)": FunctionFragment;
    "setUp(bytes)": FunctionFragment;
    "shamans(address)": FunctionFragment;
    "sharesPaused()": FunctionFragment;
    "sponsorProposal(uint256)": FunctionFragment;
    "submitProposal(uint32,bytes,string)": FunctionFragment;
    "submitVote(uint256,bool)": FunctionFragment;
    "submitVoteWithSig(uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenId(address)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalLoot()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint96)": FunctionFragment;
    "transferFrom(address,address,uint96)": FunctionFragment;
    "transferLoot(address,uint96)": FunctionFragment;
    "unsetGuildTokens(uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "convertSharesToLoot",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateSummoners",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "delegates", values: [string]): string;
  encodeFunctionData(
    functionFragment: "flashFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashFeeNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGuildTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lootPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxFlashLoan",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxVotingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "memberAction",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "members", values: [string]): string;
  encodeFunctionData(
    functionFragment: "minVotingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintLoot",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintShares",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "numCheckpoints",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalsPassed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ragequit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlashFeeNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGuildTokens",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeriods",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setShamans",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "setUp", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "shamans", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sharesPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVoteWithSig",
    values: [BigNumberish, boolean, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalLoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLoot",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetGuildTokens",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertSharesToLoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateSummoners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flashFeeNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGuildTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lootPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintLoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalsPassed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ragequit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFlashFeeNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGuildTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPeriods", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setShamans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shamans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sharesPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitVoteWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalLoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetGuildTokens",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "DelegateChanged(address,address,address)": EventFragment;
    "DelegateVotesChanged(address,uint256,uint256)": EventFragment;
    "ProcessProposal(uint256)": EventFragment;
    "Ragequit(address,address,uint96,uint96)": EventFragment;
    "SponsorProposal(address,uint256,uint256)": EventFragment;
    "SubmitProposal(uint256,uint256,bytes,string)": EventFragment;
    "SubmitVote(address,uint256,uint256,bool)": EventFragment;
    "SummonComplete(bool,bool,uint256,uint256,uint256,string,string,address[],address[],address[],uint96[],uint96[])": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferLoot(address,address,uint96)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateVotesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ragequit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SponsorProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SummonComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferLoot"): EventFragment;
}

export class Baal extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BaalInterface;

  functions: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromTimeStamp: number;
      votes: BigNumber;
      0: number;
      1: BigNumber;
    }>;

    "checkpoints(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromTimeStamp: number;
      votes: BigNumber;
      0: number;
      1: BigNumber;
    }>;

    claim(overrides?: Overrides): Promise<ContractTransaction>;

    "claim()"(overrides?: Overrides): Promise<ContractTransaction>;

    convertSharesToLoot(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "convertSharesToLoot(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    delegate(
      delegatee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegateSummoners(
      _delegators: string[],
      _delegatees: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegateSummoners(address[],address[])"(
      _delegators: string[],
      _delegatees: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "delegates(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    flashFee(
      arg0: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fee: BigNumber;
      0: BigNumber;
    }>;

    "flashFee(address,uint256)"(
      arg0: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fee: BigNumber;
      0: BigNumber;
    }>;

    flashFeeNumerator(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "flashFeeNumerator()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "flashLoan(address,address,uint256,bytes)"(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      votes: BigNumber;
      0: BigNumber;
    }>;

    "getCurrentVotes(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      votes: BigNumber;
      0: BigNumber;
    }>;

    getGuildTokens(overrides?: CallOverrides): Promise<{
      tokens: string[];
      0: string[];
    }>;

    "getGuildTokens()"(overrides?: CallOverrides): Promise<{
      tokens: string[];
      0: string[];
    }>;

    getPriorVotes(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      votes: BigNumber;
      0: BigNumber;
    }>;

    "getPriorVotes(address,uint256)"(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      votes: BigNumber;
      0: BigNumber;
    }>;

    gracePeriod(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "gracePeriod()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    lootPaused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "lootPaused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    maxFlashLoan(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      max: BigNumber;
      0: BigNumber;
    }>;

    "maxFlashLoan(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      max: BigNumber;
      0: BigNumber;
    }>;

    maxVotingPeriod(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "maxVotingPeriod()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    memberAction(
      shaman: string,
      loot: BigNumberish,
      shares: BigNumberish,
      mint: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "memberAction(address,uint96,uint96,bool)"(
      shaman: string,
      loot: BigNumberish,
      shares: BigNumberish,
      mint: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      loot: BigNumber;
      highestIndexYesVote: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "members(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      loot: BigNumber;
      highestIndexYesVote: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    minVotingPeriod(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "minVotingPeriod()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    mintLoot(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintLoot(address[],uint96[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintShares(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintShares(address[],uint96[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "multicall(bytes[])"(
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    numCheckpoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "numCheckpoints(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      sig: string;
      0: string;
    }>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      sig: string;
      0: string;
    }>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      sig: string;
      0: string;
    }>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      sig: string;
      0: string;
    }>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      sig: string;
      0: string;
    }>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      sig: string;
      0: string;
    }>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permit(address,address,uint96,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    processProposal(
      proposal: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "processProposal(uint256)"(
      proposal: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "proposalCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      votingPeriod: number;
      votingStarts: number;
      votingEnds: number;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      proposalData: string;
      details: string;
      0: number;
      1: number;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      votingPeriod: number;
      votingStarts: number;
      votingEnds: number;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      proposalData: string;
      details: string;
      0: number;
      1: number;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
    }>;

    proposalsPassed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proposalsPassed(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    ragequit(
      to: string,
      lootToBurn: BigNumberish,
      sharesToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ragequit(address,uint96,uint96)"(
      to: string,
      lootToBurn: BigNumberish,
      sharesToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFlashFeeNumerator(
      _flashFeeNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFlashFeeNumerator(uint32)"(
      _flashFeeNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGuildTokens(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGuildTokens(address[])"(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPeriods(
      _periodData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPeriods(bytes)"(
      _periodData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setShamans(
      _shamans: string[],
      enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setShamans(address[],bool)"(
      _shamans: string[],
      enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUp(
      _initializationParams: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUp(bytes)"(
      _initializationParams: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shamans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "shamans(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    sharesPaused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "sharesPaused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    sponsorProposal(
      proposal: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sponsorProposal(uint256)"(
      proposal: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submitProposal(
      votingPeriod: BigNumberish,
      proposalData: BytesLike,
      details: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitProposal(uint32,bytes,string)"(
      votingPeriod: BigNumberish,
      proposalData: BytesLike,
      details: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submitVote(
      proposal: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitVote(uint256,bool)"(
      proposal: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submitVoteWithSig(
      proposal: BigNumberish,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitVoteWithSig(uint256,bool,uint8,bytes32,bytes32)"(
      proposal: BigNumberish,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tokenId(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokenId(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalLoot(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalLoot()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint96)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint96)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferLoot(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferLoot(address,uint96)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unsetGuildTokens(
      _tokenIndexes: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unsetGuildTokens(uint256[])"(
      _tokenIndexes: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkpoints(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    fromTimeStamp: number;
    votes: BigNumber;
    0: number;
    1: BigNumber;
  }>;

  "checkpoints(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    fromTimeStamp: number;
    votes: BigNumber;
    0: number;
    1: BigNumber;
  }>;

  claim(overrides?: Overrides): Promise<ContractTransaction>;

  "claim()"(overrides?: Overrides): Promise<ContractTransaction>;

  convertSharesToLoot(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "convertSharesToLoot(address)"(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  delegate(
    delegatee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegate(address)"(
    delegatee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegatee: string,
    nonce: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
    delegatee: string,
    nonce: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegateSummoners(
    _delegators: string[],
    _delegatees: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegateSummoners(address[],address[])"(
    _delegators: string[],
    _delegatees: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegates(arg0: string, overrides?: CallOverrides): Promise<string>;

  "delegates(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  flashFee(
    arg0: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "flashFee(address,uint256)"(
    arg0: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  flashFeeNumerator(overrides?: CallOverrides): Promise<number>;

  "flashFeeNumerator()"(overrides?: CallOverrides): Promise<number>;

  flashLoan(
    receiver: string,
    token: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "flashLoan(address,address,uint256,bytes)"(
    receiver: string,
    token: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCurrentVotes(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCurrentVotes(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGuildTokens(overrides?: CallOverrides): Promise<string[]>;

  "getGuildTokens()"(overrides?: CallOverrides): Promise<string[]>;

  getPriorVotes(
    account: string,
    timeStamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPriorVotes(address,uint256)"(
    account: string,
    timeStamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gracePeriod(overrides?: CallOverrides): Promise<number>;

  "gracePeriod()"(overrides?: CallOverrides): Promise<number>;

  lootPaused(overrides?: CallOverrides): Promise<boolean>;

  "lootPaused()"(overrides?: CallOverrides): Promise<boolean>;

  maxFlashLoan(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "maxFlashLoan(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxVotingPeriod(overrides?: CallOverrides): Promise<number>;

  "maxVotingPeriod()"(overrides?: CallOverrides): Promise<number>;

  memberAction(
    shaman: string,
    loot: BigNumberish,
    shares: BigNumberish,
    mint: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "memberAction(address,uint96,uint96,bool)"(
    shaman: string,
    loot: BigNumberish,
    shares: BigNumberish,
    mint: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  members(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    loot: BigNumber;
    highestIndexYesVote: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "members(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    loot: BigNumber;
    highestIndexYesVote: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  minVotingPeriod(overrides?: CallOverrides): Promise<number>;

  "minVotingPeriod()"(overrides?: CallOverrides): Promise<number>;

  mintLoot(
    to: string[],
    amount: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintLoot(address[],uint96[])"(
    to: string[],
    amount: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintShares(
    to: string[],
    amount: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintShares(address[],uint96[])"(
    to: string[],
    amount: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "multicall(bytes[])"(
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "numCheckpoints(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  permit(
    owner: string,
    spender: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permit(address,address,uint96,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  processProposal(
    proposal: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "processProposal(uint256)"(
    proposal: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    votingPeriod: number;
    votingStarts: number;
    votingEnds: number;
    yesVotes: BigNumber;
    noVotes: BigNumber;
    proposalData: string;
    details: string;
    0: number;
    1: number;
    2: number;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: string;
  }>;

  "proposals(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    votingPeriod: number;
    votingStarts: number;
    votingEnds: number;
    yesVotes: BigNumber;
    noVotes: BigNumber;
    proposalData: string;
    details: string;
    0: number;
    1: number;
    2: number;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: string;
  }>;

  proposalsPassed(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proposalsPassed(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ragequit(
    to: string,
    lootToBurn: BigNumberish,
    sharesToBurn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ragequit(address,uint96,uint96)"(
    to: string,
    lootToBurn: BigNumberish,
    sharesToBurn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFlashFeeNumerator(
    _flashFeeNumerator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFlashFeeNumerator(uint32)"(
    _flashFeeNumerator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGuildTokens(
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGuildTokens(address[])"(
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPeriods(
    _periodData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPeriods(bytes)"(
    _periodData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setShamans(
    _shamans: string[],
    enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setShamans(address[],bool)"(
    _shamans: string[],
    enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUp(
    _initializationParams: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUp(bytes)"(
    _initializationParams: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shamans(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "shamans(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  sharesPaused(overrides?: CallOverrides): Promise<boolean>;

  "sharesPaused()"(overrides?: CallOverrides): Promise<boolean>;

  sponsorProposal(
    proposal: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sponsorProposal(uint256)"(
    proposal: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submitProposal(
    votingPeriod: BigNumberish,
    proposalData: BytesLike,
    details: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitProposal(uint32,bytes,string)"(
    votingPeriod: BigNumberish,
    proposalData: BytesLike,
    details: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submitVote(
    proposal: BigNumberish,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitVote(uint256,bool)"(
    proposal: BigNumberish,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submitVoteWithSig(
    proposal: BigNumberish,
    approved: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitVoteWithSig(uint256,bool,uint8,bytes32,bytes32)"(
    proposal: BigNumberish,
    approved: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenId(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "tokenId(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalLoot(overrides?: CallOverrides): Promise<BigNumber>;

  "totalLoot()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint96)"(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint96)"(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferLoot(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferLoot(address,uint96)"(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unsetGuildTokens(
    _tokenIndexes: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unsetGuildTokens(uint256[])"(
    _tokenIndexes: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromTimeStamp: number;
      votes: BigNumber;
      0: number;
      1: BigNumber;
    }>;

    "checkpoints(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromTimeStamp: number;
      votes: BigNumber;
      0: number;
      1: BigNumber;
    }>;

    claim(overrides?: CallOverrides): Promise<void>;

    "claim()"(overrides?: CallOverrides): Promise<void>;

    convertSharesToLoot(to: string, overrides?: CallOverrides): Promise<void>;

    "convertSharesToLoot(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    "delegate(address)"(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateSummoners(
      _delegators: string[],
      _delegatees: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "delegateSummoners(address[],address[])"(
      _delegators: string[],
      _delegatees: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    delegates(arg0: string, overrides?: CallOverrides): Promise<string>;

    "delegates(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    flashFee(
      arg0: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "flashFee(address,uint256)"(
      arg0: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashFeeNumerator(overrides?: CallOverrides): Promise<number>;

    "flashFeeNumerator()"(overrides?: CallOverrides): Promise<number>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "flashLoan(address,address,uint256,bytes)"(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentVotes(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGuildTokens(overrides?: CallOverrides): Promise<string[]>;

    "getGuildTokens()"(overrides?: CallOverrides): Promise<string[]>;

    getPriorVotes(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriorVotes(address,uint256)"(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gracePeriod(overrides?: CallOverrides): Promise<number>;

    "gracePeriod()"(overrides?: CallOverrides): Promise<number>;

    lootPaused(overrides?: CallOverrides): Promise<boolean>;

    "lootPaused()"(overrides?: CallOverrides): Promise<boolean>;

    maxFlashLoan(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "maxFlashLoan(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxVotingPeriod(overrides?: CallOverrides): Promise<number>;

    "maxVotingPeriod()"(overrides?: CallOverrides): Promise<number>;

    memberAction(
      shaman: string,
      loot: BigNumberish,
      shares: BigNumberish,
      mint: boolean,
      overrides?: CallOverrides
    ): Promise<{
      lootOut: BigNumber;
      sharesOut: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "memberAction(address,uint96,uint96,bool)"(
      shaman: string,
      loot: BigNumberish,
      shares: BigNumberish,
      mint: boolean,
      overrides?: CallOverrides
    ): Promise<{
      lootOut: BigNumber;
      sharesOut: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      loot: BigNumber;
      highestIndexYesVote: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "members(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      loot: BigNumber;
      highestIndexYesVote: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    minVotingPeriod(overrides?: CallOverrides): Promise<number>;

    "minVotingPeriod()"(overrides?: CallOverrides): Promise<number>;

    mintLoot(
      to: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "mintLoot(address[],uint96[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintShares(
      to: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "mintShares(address[],uint96[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    "multicall(bytes[])"(
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "numCheckpoints(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint96,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    processProposal(
      proposal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "processProposal(uint256)"(
      proposal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      votingPeriod: number;
      votingStarts: number;
      votingEnds: number;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      proposalData: string;
      details: string;
      0: number;
      1: number;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      votingPeriod: number;
      votingStarts: number;
      votingEnds: number;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      proposalData: string;
      details: string;
      0: number;
      1: number;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
    }>;

    proposalsPassed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proposalsPassed(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ragequit(
      to: string,
      lootToBurn: BigNumberish,
      sharesToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "ragequit(address,uint96,uint96)"(
      to: string,
      lootToBurn: BigNumberish,
      sharesToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFlashFeeNumerator(
      _flashFeeNumerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFlashFeeNumerator(uint32)"(
      _flashFeeNumerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGuildTokens(_tokens: string[], overrides?: CallOverrides): Promise<void>;

    "setGuildTokens(address[])"(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPeriods(
      _periodData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPeriods(bytes)"(
      _periodData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setShamans(
      _shamans: string[],
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setShamans(address[],bool)"(
      _shamans: string[],
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setUp(
      _initializationParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUp(bytes)"(
      _initializationParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    shamans(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "shamans(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sharesPaused(overrides?: CallOverrides): Promise<boolean>;

    "sharesPaused()"(overrides?: CallOverrides): Promise<boolean>;

    sponsorProposal(
      proposal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sponsorProposal(uint256)"(
      proposal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitProposal(
      votingPeriod: BigNumberish,
      proposalData: BytesLike,
      details: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "submitProposal(uint32,bytes,string)"(
      votingPeriod: BigNumberish,
      proposalData: BytesLike,
      details: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitVote(
      proposal: BigNumberish,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitVote(uint256,bool)"(
      proposal: BigNumberish,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    submitVoteWithSig(
      proposal: BigNumberish,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitVoteWithSig(uint256,bool,uint8,bytes32,bytes32)"(
      proposal: BigNumberish,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenId(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenId(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalLoot(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint96)"(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint96)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferLoot(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferLoot(address,uint96)"(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unsetGuildTokens(
      _tokenIndexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "unsetGuildTokens(uint256[])"(
      _tokenIndexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      amount: null
    ): EventFilter;

    DelegateChanged(
      delegator: string | null,
      fromDelegate: string | null,
      toDelegate: string | null
    ): EventFilter;

    DelegateVotesChanged(
      delegate: string | null,
      previousBalance: null,
      newBalance: null
    ): EventFilter;

    ProcessProposal(proposal: BigNumberish | null): EventFilter;

    Ragequit(
      member: string | null,
      to: null,
      lootToBurn: BigNumberish | null,
      sharesToBurn: BigNumberish | null
    ): EventFilter;

    SponsorProposal(
      member: string | null,
      proposal: BigNumberish | null,
      votingStarts: BigNumberish | null
    ): EventFilter;

    SubmitProposal(
      proposal: BigNumberish | null,
      votingPeriod: null,
      proposalData: null,
      details: null
    ): EventFilter;

    SubmitVote(
      member: string | null,
      balance: null,
      proposal: BigNumberish | null,
      approved: boolean | null
    ): EventFilter;

    SummonComplete(
      lootPaused: null,
      sharesPaused: null,
      gracePeriod: null,
      minVotingPeriod: null,
      maxVotingPeriod: null,
      name: null,
      symbol: null,
      guildTokens: null,
      shamans: null,
      summoners: null,
      loot: null,
      shares: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, amount: null): EventFilter;

    TransferLoot(
      from: string | null,
      to: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkpoints(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(overrides?: Overrides): Promise<BigNumber>;

    "claim()"(overrides?: Overrides): Promise<BigNumber>;

    convertSharesToLoot(to: string, overrides?: Overrides): Promise<BigNumber>;

    "convertSharesToLoot(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(delegatee: string, overrides?: Overrides): Promise<BigNumber>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegateSummoners(
      _delegators: string[],
      _delegatees: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "delegateSummoners(address[],address[])"(
      _delegators: string[],
      _delegatees: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "delegates(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashFee(
      arg0: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "flashFee(address,uint256)"(
      arg0: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashFeeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "flashFeeNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "flashLoan(address,address,uint256,bytes)"(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentVotes(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGuildTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getGuildTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorVotes(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriorVotes(address,uint256)"(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "gracePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    lootPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "lootPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxFlashLoan(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "maxFlashLoan(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxVotingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "maxVotingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    memberAction(
      shaman: string,
      loot: BigNumberish,
      shares: BigNumberish,
      mint: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "memberAction(address,uint96,uint96,bool)"(
      shaman: string,
      loot: BigNumberish,
      shares: BigNumberish,
      mint: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    members(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "members(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minVotingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "minVotingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintLoot(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintLoot(address[],uint96[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintShares(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintShares(address[],uint96[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: Overrides): Promise<BigNumber>;

    "multicall(bytes[])"(
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "numCheckpoints(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permit(address,address,uint96,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    processProposal(
      proposal: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "processProposal(uint256)"(
      proposal: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalsPassed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposalsPassed(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ragequit(
      to: string,
      lootToBurn: BigNumberish,
      sharesToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ragequit(address,uint96,uint96)"(
      to: string,
      lootToBurn: BigNumberish,
      sharesToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFlashFeeNumerator(
      _flashFeeNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFlashFeeNumerator(uint32)"(
      _flashFeeNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGuildTokens(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGuildTokens(address[])"(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPeriods(
      _periodData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPeriods(bytes)"(
      _periodData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setShamans(
      _shamans: string[],
      enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setShamans(address[],bool)"(
      _shamans: string[],
      enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUp(
      _initializationParams: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUp(bytes)"(
      _initializationParams: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shamans(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "shamans(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sharesPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "sharesPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    sponsorProposal(
      proposal: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sponsorProposal(uint256)"(
      proposal: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    submitProposal(
      votingPeriod: BigNumberish,
      proposalData: BytesLike,
      details: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitProposal(uint32,bytes,string)"(
      votingPeriod: BigNumberish,
      proposalData: BytesLike,
      details: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    submitVote(
      proposal: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitVote(uint256,bool)"(
      proposal: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    submitVoteWithSig(
      proposal: BigNumberish,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitVoteWithSig(uint256,bool,uint8,bytes32,bytes32)"(
      proposal: BigNumberish,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenId(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenId(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLoot(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint96)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint96)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferLoot(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferLoot(address,uint96)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unsetGuildTokens(
      _tokenIndexes: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unsetGuildTokens(uint256[])"(
      _tokenIndexes: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkpoints(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claim()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    convertSharesToLoot(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "convertSharesToLoot(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegateSummoners(
      _delegators: string[],
      _delegatees: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegateSummoners(address[],address[])"(
      _delegators: string[],
      _delegatees: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delegates(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flashFee(
      arg0: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "flashFee(address,uint256)"(
      arg0: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flashFeeNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "flashFeeNumerator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "flashLoan(address,address,uint256,bytes)"(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentVotes(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGuildTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGuildTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorVotes(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriorVotes(address,uint256)"(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gracePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gracePeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lootPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lootPaused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxFlashLoan(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxFlashLoan(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxVotingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxVotingPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberAction(
      shaman: string,
      loot: BigNumberish,
      shares: BigNumberish,
      mint: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "memberAction(address,uint96,uint96,bool)"(
      shaman: string,
      loot: BigNumberish,
      shares: BigNumberish,
      mint: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "members(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minVotingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minVotingPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintLoot(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintLoot(address[],uint96[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintShares(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintShares(address[],uint96[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "multicall(bytes[])"(
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numCheckpoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numCheckpoints(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint96,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    processProposal(
      proposal: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "processProposal(uint256)"(
      proposal: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalsPassed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalsPassed(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ragequit(
      to: string,
      lootToBurn: BigNumberish,
      sharesToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ragequit(address,uint96,uint96)"(
      to: string,
      lootToBurn: BigNumberish,
      sharesToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFlashFeeNumerator(
      _flashFeeNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFlashFeeNumerator(uint32)"(
      _flashFeeNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGuildTokens(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGuildTokens(address[])"(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPeriods(
      _periodData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPeriods(bytes)"(
      _periodData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setShamans(
      _shamans: string[],
      enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setShamans(address[],bool)"(
      _shamans: string[],
      enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUp(
      _initializationParams: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUp(bytes)"(
      _initializationParams: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shamans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shamans(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sharesPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sharesPaused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sponsorProposal(
      proposal: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sponsorProposal(uint256)"(
      proposal: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    submitProposal(
      votingPeriod: BigNumberish,
      proposalData: BytesLike,
      details: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitProposal(uint32,bytes,string)"(
      votingPeriod: BigNumberish,
      proposalData: BytesLike,
      details: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    submitVote(
      proposal: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitVote(uint256,bool)"(
      proposal: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    submitVoteWithSig(
      proposal: BigNumberish,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitVoteWithSig(uint256,bool,uint8,bytes32,bytes32)"(
      proposal: BigNumberish,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenId(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenId(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalLoot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint96)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint96)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferLoot(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferLoot(address,uint96)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unsetGuildTokens(
      _tokenIndexes: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unsetGuildTokens(uint256[])"(
      _tokenIndexes: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
