/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IMemeNftInterface extends ethers.utils.Interface {
  functions: {
    "licenseActive(address)": FunctionFragment;
    "royaltyCount()": FunctionFragment;
    "royaltyMerkleRoot()": FunctionFragment;
    "sumRoyalties(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "licenseActive",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sumRoyalties",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "licenseActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sumRoyalties",
    data: BytesLike
  ): Result;

  events: {};
}

export class IMemeNft extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IMemeNftInterface;

  functions: {
    licenseActive(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "licenseActive(address)"(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    royaltyCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "royaltyCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    royaltyMerkleRoot(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "royaltyMerkleRoot()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    sumRoyalties(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "sumRoyalties(uint256,uint256)"(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  licenseActive(_holder: string, overrides?: CallOverrides): Promise<boolean>;

  "licenseActive(address)"(
    _holder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  royaltyCount(overrides?: CallOverrides): Promise<BigNumber>;

  "royaltyCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  royaltyMerkleRoot(overrides?: CallOverrides): Promise<string>;

  "royaltyMerkleRoot()"(overrides?: CallOverrides): Promise<string>;

  sumRoyalties(
    _start: BigNumberish,
    _end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "sumRoyalties(uint256,uint256)"(
    _start: BigNumberish,
    _end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    licenseActive(_holder: string, overrides?: CallOverrides): Promise<boolean>;

    "licenseActive(address)"(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    royaltyCount(overrides?: CallOverrides): Promise<BigNumber>;

    "royaltyCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyMerkleRoot(overrides?: CallOverrides): Promise<string>;

    "royaltyMerkleRoot()"(overrides?: CallOverrides): Promise<string>;

    sumRoyalties(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sumRoyalties(uint256,uint256)"(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    licenseActive(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "licenseActive(address)"(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    royaltyCount(overrides?: CallOverrides): Promise<BigNumber>;

    "royaltyCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    "royaltyMerkleRoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    sumRoyalties(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sumRoyalties(uint256,uint256)"(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    licenseActive(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "licenseActive(address)"(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royaltyCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "royaltyCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    royaltyMerkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "royaltyMerkleRoot()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sumRoyalties(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sumRoyalties(uint256,uint256)"(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
