/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { PlantoidSpawn } from "./PlantoidSpawn";

export class PlantoidSpawnFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_template: string, overrides?: Overrides): Promise<PlantoidSpawn> {
    return super.deploy(_template, overrides || {}) as Promise<PlantoidSpawn>;
  }
  getDeployTransaction(
    _template: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_template, overrides || {});
  }
  attach(address: string): PlantoidSpawn {
    return super.attach(address) as PlantoidSpawn;
  }
  connect(signer: Signer): PlantoidSpawnFactory {
    return super.connect(signer) as PlantoidSpawnFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PlantoidSpawn {
    return new Contract(address, _abi, signerOrProvider) as PlantoidSpawn;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_template",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "plantoid",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "artist",
        type: "address",
      },
    ],
    name: "PlantoidSpawned",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_plantoidAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "_artist",
        type: "address",
      },
    ],
    name: "spawnPlantoid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "template",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161032838038061032883398101604081905261002f91610044565b60601b6001600160601b031916608052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160601c610291610097600039600081816068015260aa01526102916000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806354f4e6e51461003b5780636f2ddd9314610063575b600080fd5b61004e610049366004610228565b6100a2565b60405190151581526020015b60405180910390f35b61008a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161005a565b6000806100ce7f00000000000000000000000000000000000000000000000000000000000000006101ba565b604051634d91d7d960e01b81526001600160a01b0386811660048301528581166024830152608060448301526009608483015268544f444f2d4e616d6560b81b60a483015260c06064830152600b60c48301526a1513d113cb54de5b589bdb60aa1b60e483015291925090821690634d91d7d99061010401600060405180830381600087803b15801561016057600080fd5b505af1158015610174573d6000803e3d6000fd5b50506040516001600160a01b038087169350841691507f41f5c5522291ed9f943111efe0472cc0f845f20f6da0cf908cbd122f750e7a5490600090a35060019392505050565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f0949350505050565b80356001600160a01b038116811461022357600080fd5b919050565b6000806040838503121561023b57600080fd5b6102448361020c565b91506102526020840161020c565b9050925092905056fea264697066735822122024aa46bf5f3bdb8f1fbdd37ee5fc0efd35bcfb6fe976120cb950aa458ed445f464736f6c63430008070033";
