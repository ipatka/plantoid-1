/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ModuleInterface extends ethers.utils.Interface {
  functions: {
    "avatar()": FunctionFragment;
    "getGuard()": FunctionFragment;
    "guard()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAvatar(address)": FunctionFragment;
    "setGuard(address)": FunctionFragment;
    "setTarget(address)": FunctionFragment;
    "setUp(bytes)": FunctionFragment;
    "target()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "avatar", values?: undefined): string;
  encodeFunctionData(functionFragment: "getGuard", values?: undefined): string;
  encodeFunctionData(functionFragment: "guard", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAvatar", values: [string]): string;
  encodeFunctionData(functionFragment: "setGuard", values: [string]): string;
  encodeFunctionData(functionFragment: "setTarget", values: [string]): string;
  encodeFunctionData(functionFragment: "setUp", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "avatar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGuard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGuard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AvatarSet(address,address)": EventFragment;
    "ChangedGuard(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TargetSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AvatarSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedGuard"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetSet"): EventFragment;
}

export class Module extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ModuleInterface;

  functions: {
    avatar(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "avatar()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getGuard(overrides?: CallOverrides): Promise<{
      _guard: string;
      0: string;
    }>;

    "getGuard()"(overrides?: CallOverrides): Promise<{
      _guard: string;
      0: string;
    }>;

    guard(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "guard()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setAvatar(
      _avatar: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAvatar(address)"(
      _avatar: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGuard(
      _guard: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGuard(address)"(
      _guard: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTarget(
      _target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTarget(address)"(
      _target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUp(
      initializeParams: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUp(bytes)"(
      initializeParams: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    target(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "target()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  avatar(overrides?: CallOverrides): Promise<string>;

  "avatar()"(overrides?: CallOverrides): Promise<string>;

  getGuard(overrides?: CallOverrides): Promise<string>;

  "getGuard()"(overrides?: CallOverrides): Promise<string>;

  guard(overrides?: CallOverrides): Promise<string>;

  "guard()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setAvatar(
    _avatar: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAvatar(address)"(
    _avatar: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGuard(_guard: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setGuard(address)"(
    _guard: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTarget(
    _target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTarget(address)"(
    _target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUp(
    initializeParams: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUp(bytes)"(
    initializeParams: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  target(overrides?: CallOverrides): Promise<string>;

  "target()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    avatar(overrides?: CallOverrides): Promise<string>;

    "avatar()"(overrides?: CallOverrides): Promise<string>;

    getGuard(overrides?: CallOverrides): Promise<string>;

    "getGuard()"(overrides?: CallOverrides): Promise<string>;

    guard(overrides?: CallOverrides): Promise<string>;

    "guard()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setAvatar(_avatar: string, overrides?: CallOverrides): Promise<void>;

    "setAvatar(address)"(
      _avatar: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGuard(_guard: string, overrides?: CallOverrides): Promise<void>;

    "setGuard(address)"(
      _guard: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTarget(_target: string, overrides?: CallOverrides): Promise<void>;

    "setTarget(address)"(
      _target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUp(
      initializeParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUp(bytes)"(
      initializeParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    target(overrides?: CallOverrides): Promise<string>;

    "target()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AvatarSet(
      previousAvatar: string | null,
      newAvatar: string | null
    ): EventFilter;

    ChangedGuard(guard: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    TargetSet(
      previousTarget: string | null,
      newTarget: string | null
    ): EventFilter;
  };

  estimateGas: {
    avatar(overrides?: CallOverrides): Promise<BigNumber>;

    "avatar()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGuard(overrides?: CallOverrides): Promise<BigNumber>;

    "getGuard()"(overrides?: CallOverrides): Promise<BigNumber>;

    guard(overrides?: CallOverrides): Promise<BigNumber>;

    "guard()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setAvatar(_avatar: string, overrides?: Overrides): Promise<BigNumber>;

    "setAvatar(address)"(
      _avatar: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGuard(_guard: string, overrides?: Overrides): Promise<BigNumber>;

    "setGuard(address)"(
      _guard: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTarget(_target: string, overrides?: Overrides): Promise<BigNumber>;

    "setTarget(address)"(
      _target: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUp(
      initializeParams: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUp(bytes)"(
      initializeParams: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    target(overrides?: CallOverrides): Promise<BigNumber>;

    "target()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    avatar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "avatar()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGuard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGuard()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "guard()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setAvatar(
      _avatar: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAvatar(address)"(
      _avatar: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGuard(
      _guard: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGuard(address)"(
      _guard: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTarget(
      _target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTarget(address)"(
      _target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUp(
      initializeParams: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUp(bytes)"(
      initializeParams: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    target(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "target()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
