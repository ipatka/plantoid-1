/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MultiSend } from "./MultiSend";

export class MultiSendFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<MultiSend> {
    return super.deploy(overrides || {}) as Promise<MultiSend>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MultiSend {
    return super.attach(address) as MultiSend;
  }
  connect(signer: Signer): MultiSendFactory {
    return super.connect(signer) as MultiSendFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiSend {
    return new Contract(address, _abi, signerOrProvider) as MultiSend;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "transactions",
        type: "bytes",
      },
    ],
    name: "multiSend",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5030606081901b6080526102606100316000396000605001526102606000f3fe60806040526004361061001e5760003560e01c80638d80ff0a14610023575b600080fd5b610036610031366004610163565b610038565b005b3073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614156100db5760405162461bcd60e51b815260206004820152603060248201527f4d756c746953656e642073686f756c64206f6e6c792062652063616c6c65642060448201526f1d9a584819195b1959d85d1958d85b1b60821b606482015260840160405180910390fd5b805160205b8181101561015e578083015160f81c6001820184015160601c601583018501516035840186015160558501870160008560008114610125576001811461013557610140565b6000808585888a5af19150610140565b6000808585895af491505b508061014b57600080fd5b50508060550185019450505050506100e0565b505050565b60006020828403121561017557600080fd5b813567ffffffffffffffff8082111561018d57600080fd5b818401915084601f8301126101a157600080fd5b8135818111156101b3576101b3610214565b604051601f8201601f19908116603f011681019083821181831017156101db576101db610214565b816040528281528760208487010111156101f457600080fd5b826020860160208301376000928101602001929092525095945050505050565b634e487b7160e01b600052604160045260246000fdfea264697066735822122049f79773660634aafaf3eecd017f226b81f29fc74f1dd1fdf54fb5a9d6db2b4464736f6c63430008070033";
